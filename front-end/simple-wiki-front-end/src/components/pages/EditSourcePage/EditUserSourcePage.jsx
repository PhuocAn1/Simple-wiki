import './EditUserSourcePage.css';
import '../../pages/WikiTextStyling/WikiTextStyle.css'
import { useEffect, useState } from 'react';
import { Link, useLocation} from 'react-router-dom';
import { FaLink, FaImage, FaQuoteRight } from 'react-icons/fa';
import Header from '../../common/Header/Header';
import { renderWikiText } from '../../services/WikiMarkupService';
import { getPageContentByTitle, createPage, getRawWikitextContentByTitle, updatePage } from '../../services/PageService';
import ConfirmationPanel from '../../common/ConfirmationPanel/ConfirmationPanel';

const EditSourcePage = () => {
  //const pageTitle = localStorage.getItem('currentPage') || 'User:MrThrowAway';
  const [content, setContent] = useState('');
  const [previewContent, setPreviewContent] = useState(''); // State to hold rendered HTML
  const [showPreview, setShowPreview] = useState(false); // Toggle preview panel
  const [summary, setSummary] = useState('');
  const [showConfirm, setShowConfirm] = useState(false)// State use by the Confirmation panel

  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  // The page title part will get the title from the param and search the database
  //const pageTitle = searchParams.get('username') || localStorage.getItem('currentPage') || 'User:user';
  const rawUsername = searchParams.get('username');
  const pageTitle = rawUsername ? `User:${rawUsername}` : localStorage.getItem('currentPage') || 'User:user';

  const handleContentChange = (e) => {
    setContent(e.target.value);
  };

  const handleSummaryChange = (e) => {
    setSummary(e.target.value);
  };

  // Function to parse and render wikitext (simplified)
  const renderPreview = async () => {
    // Logic to convert wikitext to HTML or formatted text
    // Could use a simple regex or a wikitext parser library
    if (content !== '') {
      try {
        const htmlContent = await renderWikiText(content);
        setPreviewContent(htmlContent); // Update state with rendered HTML
      } catch (error) {
        console.error('Error rendering preview:', error);
        setPreviewContent('<p>Error rendering content</p>'); // Fallback for errors
      }
    } else {
      setPreviewContent(''); // Clear preview if content is empty
    }
   
    //return <div dangerouslySetInnerHTML={{ __html: htmlContent }}></div>
  };

  const previewButtonClicked = () => {
    setShowPreview(!showPreview);
    if (!showPreview) {
      renderPreview(); // Render preview when showing it
    }
  };

  const reloadButtonClicked = () => {
    if (showPreview) {
      renderPreview(); // Re-render preview on reload
    }
  };

  const cancleButtonClicked = () => {
    setShowConfirm(true);
  } 

  const handleDiscard = () => {
    // Logic to discard edits
    console.log("Edits discarded");
    setShowConfirm(false);
    // Re fetch the raw wiki text
  }

  const handleCancel = () => {
    // This is the continue editing option for the cancel edit option
    setShowConfirm(false);
  }

  const saveButtonClicked = async () => {
    // Check if a page has existed for the user if not then create a page, otherwise update the page.
    const username = localStorage.getItem('username');
    let isPageExisted = true; // This check if we need to create a new page or to simply update the existing user page.

    // 1. Check if a page for the user has existed.
    try {
      const userPageDTO = await getPageContentByTitle("User:" + username);
    } catch (error) {
      isPageExisted = false;
      console.log(error.message); //This mean the page for the user has not been created in the database
    }

    const userId = parseInt(localStorage.getItem('userId')); // Assuming userId is stored
    if (isNaN(userId)) {
      console.error('Invalid userId from localStorage');
      return;
    }
    
    // Constructing the pageDTO to pass to the backend
    const pageDTO = {
      pageId: null, // Will be auto-generated by the backend
      title: `User:${username}`, // The user page title will follow the convention "User:" + username
      userId: userId,
      pageRevisionDTO: {
        revisionId: null, // Will be auto-generated by the backend
        pageId: null, // Will be set by the backend
        userId: userId,
        content: content || '', // Use empty string if no content
        summary: summary || '', // Use empty string if no summary
        createdAt: new Date().toISOString(), // Match LocalDateTime format
      },
      createdAt: new Date().toISOString(), // Match LocalDateTime format
      updatedAt: new Date().toISOString(), // Match LocalDateTime format
    };  

    console.log(pageDTO);
    if (isPageExisted === false) {
      // The page for the user has not been created yet so we create a page here
      try {
        const response = await createPage(pageDTO);
        console.log('Page created successfully:', response);
        // May be navigate back to the user page after this?
      } catch (error) {
        console.error('Error creating page:', error.message);
        // Optionally add UI feedback for the error
      }

    } else {
      // Updated the page
      try {
        const response = await updatePage(pageDTO, `User:${username}`);
        console.log('Page updated successfully:', response);
      } catch (error) {
        console.error('Error updating page:', error.message);
      }
    }

    console.log("Save button clicked");
  }

  useEffect(() => {
    const fetchRawWikiText = async (title) => {
      try {
        const pageDTO = await getRawWikitextContentByTitle(title);
        //console.log(pageDTO.pageRevisionDTO.content);
        setContent(pageDTO.pageRevisionDTO.content)        
      } catch (error) {
        console.log(error.message);
      }
    }
    fetchRawWikiText(pageTitle);
  },[]);

  return (
    <div className="wiki-container">
      <Header />
      <div className="subheader">
        <Link to={`/user/${encodeURIComponent(rawUsername)}`} className="subheader-link">User page</Link>
        <Link to={`/edit-source?username=${encodeURIComponent(rawUsername)}`} className="subheader-link active">Edit source</Link>
      </div>

      <div className="page-content">
        <h1 className='page-title'>Editing {pageTitle}</h1>

        <div className="editor-toolbar-container">
            <div className="editor-toolbar">
                <button><FaLink /></button>
                <button><FaImage /></button>    
                <button><FaQuoteRight /></button>
            </div>

            <div className="editor-toolbar-right-button-group">
              <button className={`reload-button ${showPreview ? 'visible' : ''}`} 
              onClick={reloadButtonClicked}>
                Reload
              </button>
              <button className="preview-button" onClick={previewButtonClicked}>
                {showPreview ? 'Hide Preview' : 'Preview'}
              </button> 
            </div>
            
        </div>      

        <div className="editor-container">
          <textarea
          value={content}
          onChange={handleContentChange}
          placeholder="Testing wikitext..."
          className="editor-textarea"

          style={{ width: showPreview ? '50%' : '100%' }}
          />
          {showPreview && (
            <div className="preview-pane">
              <div className="preview-content" dangerouslySetInnerHTML={{ __html: previewContent }}>
                {/* {renderPreview()} */}
              </div>
              
            </div>
          )}
        </div>
        
        <div className="edit-options">
          <span className="edit-summary">
            <label htmlFor="">Summary: </label>
          </span>
          <input
          value={summary}
          onChange={handleSummaryChange}
          className="summary-textarea"
          />

          <div className="edit-buttons">
            <button className="save-button" onClick={saveButtonClicked}>Save</button> 
            <button className="show-preview-button">Show preview</button>
            <button className="cancel-button" onClick={cancleButtonClicked}>Cancel</button>
          </div>
        </div>
        
        {showConfirm && (
        <ConfirmationPanel
          message="Are you sure you want to leave editing mode without publishing first?"
          onConfirm={handleDiscard}
          onCancel={handleCancel}
        />
      )}
      </div>
    </div>
  );
};

export default EditSourcePage;